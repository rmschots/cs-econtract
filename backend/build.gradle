apply plugin: 'checkstyle'
apply plugin: 'war'

bootRepackage {
    enabled = true
}


task pathingJar(type: Jar) {
    dependsOn configurations.runtime
    appendix = 'pathing'

    doFirst {
        manifest {
            attributes "Class-Path": configurations.runtime.files.collect {
                it.toURL().toString().replaceFirst(" /file:/ + /", "/ ").replaceAll(' ', '%20');
            }.join(" ")
        }
    }
}

bootRun {
    dependsOn pathingJar
    doFirst {
        classpath = files(sourceSets.main.output.files, pathingJar.archivePath)
    }
}


description = ""


configurations {
    javadocDeps
    compile.exclude module: 'spring-boot-starter-logging'
    compile.exclude module: 'slf4j-log4j12'

    provided.all*.exclude group: 'javax.servlet'
}

// Allow passing of system properties to the Gradle command like Maven
// eg. mvn spring-boot:run -Dspring.profiles.active=h2,dev => gradle bootRun -Dspring.profiles.active=h2,dev
bootRun {
    systemProperties System.properties
    if (project.hasProperty('customConfig')) {
        bootRun.jvmArgs += customConfig
    }
    if (project.hasProperty('agentLib')) {
        bootRun.jvmArgs += agentLib
    }

    // bootRun.jvmArgs += "-Dhttps.proxyHost=10.0.0.100Â -Dhttp.proxyPort=8800 "
    // Define system properties seperate for a more defined list, as not to include all from the system.
    //systemProperty 'spring.profiles.active', System.properties['spring.profiles.active']
}

war {
}

dependencies {
    // spring
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"

    // logging
    compile "org.springframework.boot:spring-boot-starter-log4j2"
    compile "org.apache.logging.log4j:log4j-jcl"
    compile "org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:$log4j2Version"

    // utils
    compile "commons-lang:commons-lang:$commonLangVersion"
    compile "commons-io:commons-io:$apacheCommonsVersion"
    compile "org.apache.commons:commons-lang3:$apacheCommonsLang3Version"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"

    // database
    compile "org.liquibase:liquibase-core"
    compile "com.h2database:h2"
    compile "org.mariadb.jdbc:mariadb-java-client"
    // Connection pool
    compile("com.zaxxer:HikariCP")

    // swagger
    compile "io.springfox:springfox-swagger-ui:$swaggerVersion"
    compile "io.springfox:springfox-swagger2:$swaggerVersion"

    // keycloak
    compile("org.springframework.boot:spring-boot-starter-security") // Required!
    compile("org.keycloak:keycloak-tomcat8-adapter:$keycloakVersion")
    compile("be.cipalschaubroeck.keycloak-addons:keycloak-multitenant-client-springboot:$keycloakaddonsVersion")
    // lombok
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    apt "org.projectlombok:lombok:$lombokVersion"

    // OTHER
    compile "be.e_contract.dssp:dssp-client:$dsspClientVersion"

    // DEV
    runtime "org.springframework.boot:spring-boot-devtools"

    // TESTS
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.keycloak:keycloak-jetty91-adapter:$keycloakVersion"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testApt "org.projectlombok:lombok:$lombokVersion"
}